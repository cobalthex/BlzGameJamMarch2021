using UnityEngine;
using UnityEngine.SceneManagement;

public class PlayerController : MonoBehaviour
{
    public float LookSpeed = 500;
    public float MoveSpeed = 8f;
    public float JumpSeconds = 0.1f;
    public float JumpStrength = 30;
    public bool InvertLookUp = false;

    float jumpEndTime = 0;

    new Rigidbody rigidbody;
    new Camera camera;

    void Start()
    {
        rigidbody = GetComponent<Rigidbody>();
        camera = GetComponentInChildren<Camera>();

        camera.nearClipPlane = 0.0001f; // editor only allows to 0.01
    }

    bool isGrounded;

    void Update()
    {
        if (Input.GetKeyDown(KeyCode.R))
        {
            SceneManager.LoadScene(SceneManager.GetActiveScene().name, LoadSceneMode.Single);
            return;
        }

        var lookSpeed = LookSpeed * Time.deltaTime;

        // camera.transform.localEulerAngles gives weird results

        var q = camera.transform.localRotation; //l ocalEulerAngles is weird

        var yaw = Mathf.Atan2(2.0f * (q.y * q.z + q.w * q.x), q.w * q.w - q.x * q.x - q.y * q.y + q.z * q.z) * Mathf.Rad2Deg;
        var pitch = Mathf.Asin(-2.0f * (q.x * q.z - q.w * q.y)) * Mathf.Rad2Deg;
        var roll = Mathf.Atan2(2.0f * (q.x * q.y + q.w * q.z), q.w * q.w + q.x * q.x - q.y * q.y - q.z * q.z) * Mathf.Rad2Deg;


        // horizontal rotation
        {
            transform.Rotate(Vector3.up, Input.GetAxis("Mouse X") * lookSpeed, Space.World);
        }

        // vertical rotation
        {
            /* the hard way */
            // // quaternion rotations are always unsigned
            // var oldPitch = Quaternion.Angle(camera.transform.localRotation, Quaternion.AngleAxis(0, Vector3.right));
            // // there is probably a smarter way to do this
            // var dot = Quaternion.Dot(camera.transform.localRotation, Quaternion.AngleAxis(90, Vector3.right));
            // dot = (dot * 2) - 1; // since only using -90->90, convert 0-1 to -1-1
            // oldPitch *= Mathf.Sign(dot);

            var delta = Input.GetAxis("Mouse Y") * lookSpeed * (InvertLookUp ? 1 : -1);
            var newPitch = Mathf.Clamp(pitch + delta, -89, 89);
            camera.transform.Rotate(Vector3.right, newPitch - pitch, Space.Self);

            //camera.transform.localRotation *= 
        }

        // tilt
        {
            // todo: automatically re-center
            var delta = Input.GetAxis("Tilt") * lookSpeed * (InvertLookUp ? 1 : -1);
            if (delta != 0)
                delta = Mathf.Lerp(roll, 0, 0.25f);

            var newRoll = Mathf.Clamp(roll + delta, -20, 20);
            camera.transform.Rotate(Vector3.forward, newRoll - roll, Space.Self);
        }

        var move = new Vector3();

        // not very reliable
        // should probably place collider at feet and test if colliding
        Physics.Raycast(new Ray(transform.position, Physics.gravity.normalized), out var hit);
        isGrounded = hit.distance <= 0.001f;

        // basic movement
        move += (Vector3.forward * Input.GetAxis("Vertical"));
        move += (Vector3.right * Input.GetAxis("Horizontal"));
        move.Normalize();
        move *= MoveSpeed * (isGrounded ? 1 : 0.1f);

        if (isGrounded)
        {
            if (Input.GetButtonDown("Jump"))
                jumpEndTime = Time.time + JumpSeconds;
        }
        // fake ground friction? (vs lower air resistance)?

#if DEBUG
        if (Input.GetKeyDown(KeyCode.G))
            jumpEndTime = Time.time + JumpSeconds;
#endif

        if (Time.time < jumpEndTime)
        {
            move += transform.up /* * Input.GetAxis("Jump") */ * JumpStrength;
        }

        // use MovePosition?
        rigidbody.AddRelativeForce(move);

    }

    //void OnCollisionEnter(Collision collision)
    //{
    //    isGrounded = Mathf.Abs(Vector3.Dot(rigidbody.velocity, Physics.gravity)) < 0.001f;
    //}

#if DEBUG
    void OnGUI()
    {
        GUI.Label(new Rect(10, 10, 200, 20), $"Grounded: {isGrounded}");
    }
#endif
}
